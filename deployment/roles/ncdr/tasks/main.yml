---
# set up the NCDR project itself

- name: Setup the Git repo
  git:
    repo: "{{ GIT_REPO }}"
    version: "{{ GIT_BRANCH }}"
    dest: "{{ PROJECT_PATH }}"
    accept_hostkey: yes
    force: yes

- name: Delete all .pyc files
  command: find . -name '*.pyc' -delete
  args:
    chdir: "{{ PROJECT_PATH }}"
  tags: git
  changed_when: False

- name: Ensure no existing virtualenv exists
  file:
    state: absent
    path: "{{ VIRTUALENV_PATH }}/"

- name: Create the virtualenv
  shell: . /usr/share/virtualenvwrapper/virtualenvwrapper.sh && mkvirtualenv -p /usr/bin/python3 {{ application_name }}
  args:
    executable: /bin/bash

- name: Create the virtualenv project
  shell: . /usr/share/virtualenvwrapper/virtualenvwrapper.sh && setvirtualenvproject
  args:
    chdir: "{{ PROJECT_PATH }}"
    executable: /bin/bash

- name: Creates log dir
  file:
    path: "{{ LOG_DIR }}"
    state: directory

- name: Creates config dir
  file:
    path: "{{ CONFIG_DIR }}"
    state: directory

- name: Create environment variable files directory
  file:
    path: "{{ PROJECT_PATH }}/env_vars"
    state: directory

- name: Create environment variable files for envdir
  template:
    src: "{{ item }}"
    dest: "{{ PROJECT_PATH }}/env_vars/{{ item | basename | regex_replace('\\.jinja2', '') }}"
    mode: 0744
    owner: ubuntu
  with_fileglob:
    - templates/settings/*.jinja2

- name: Create configs
  template:
    src: "templates/nginx_site.conf.jinja2"
    dest: "{{ PROJECT_PATH }}/deployment/config/nginx_site.conf"
    mode: 0744
    owner: ubuntu

- name: Install packages required by the Django app inside virtualenv
  pip:
    virtualenv: "{{ VIRTUALENV_PATH }}"
    requirements: "{{ REQUIREMENTS_FILE }}"

- name: Run Django database migrations
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "envdir env_vars {{ VIRTUALENV_PATH }}/bin/python manage.py migrate"

- name: Run Django collectstatic
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "envdir env_vars {{ VIRTUALENV_PATH }}/bin/python manage.py collectstatic --noinput"

- name: Remove old nginx default
  become: true
  file:
    state: absent
    path: "/etc/nginx/sites-available/default"

- name: Symlink nginx
  become: true
  file:
    src: "{{ PROJECT_PATH }}/deployment/config/nginx_site.conf"
    dest: "/etc/nginx/sites-available/default"
    owner: root
    group: root
    state: link

- name: Restart nginx
  become: true
  service:
    name: nginx
    state: restarted
    enabled: yes

- name: Kill gunicorn
  become: yes
  command: "pkill gunicorn"
  ignore_errors: True

- name: Create circus config
  become: yes
  template:
    src: "templates/circus.ini.jinja2"
    dest: "/etc/circus/circusd.ini"

- name: Restart circus
  become: yes
  command: "circusctl restart"
  ignore_errors: True

- name: setup the disk space cron
  cron:
    name: "disk space"
    minute: "0"
    user: "ubuntu"
    job: "cd {{ PROJECT_PATH }} && envdir env_vars {{ VIRTUALENV_PATH }}/bin/python manage.py check_disk_space"
